generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  Hacker
  Admin
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified DateTime?
  phone         String?   @db.VarChar(10) // US phone number
  school        String?
  image         String?
  role          Role      @default(Hacker)
  accounts      Account[]
  sessions      Session[]
  Attendees     Attendees[]
  Application   Application[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Competition {
  code          String   @id
  name          String
  description   String?
  frontpage_url String
  start_date    DateTime
  end_date      DateTime
  location      String
  location_url  String

  preview          DateTime
  apply_open       DateTime
  apply_close      DateTime
  decision_release DateTime
  confirm_by       DateTime
  Attendees        Attendees[]
  Application      Application[]
}

model Attendees {
  userId          String
  compeition_code String
  points          Int
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  competition     Competition @relation(fields: [compeition_code], references: [code], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, compeition_code])
}

model Application {
  userId           String
  competition_code String
  status           Status      @default(STARTED)
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  competition      Competition @relation(fields: [competition_code], references: [code], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, competition_code])
}

enum Status {
  STARTED
  APPLIED
  REJECTED
  WAITLISTED
  ACCEPTED
  NOT_ATTENDING
  ATTENDING
}
